name: Monitor Batting Cage Website

on:
  schedule:
    # Runs every 15 minutes during active hours (7am-9pm Pacific time)
    # These are in UTC time (Pacific time +7/8 hours depending on DST)
    # During standard time (Nov-Mar): Pacific is UTC-8, so 7am PT = 15:00 UTC, 9pm PT = 05:00 UTC
    # During daylight time (Mar-Nov): Pacific is UTC-7, so 7am PT = 14:00 UTC, 9pm PT = 04:00 UTC
    
    # Standard time hours (15:00-05:00 UTC, which is 7am-9pm Pacific Standard Time)
    - cron: '*/15 15-23 * 11,12,1,2,3 *' # 15:00-23:59 UTC (Nov-Mar)
    - cron: '*/15 0-5 * 11,12,1,2,3 *'   # 00:00-05:00 UTC (Nov-Mar)
    
    # Daylight saving time hours (14:00-04:00 UTC, which is 7am-9pm Pacific Daylight Time)
    - cron: '*/15 14-23 * 3,4,5,6,7,8,9,10 *' # 14:00-23:59 UTC (Mar-Oct)
    - cron: '*/15 0-4 * 3,4,5,6,7,8,9,10 *'   # 00:00-04:00 UTC (Mar-Oct)
  
  workflow_dispatch:  # Allows manual triggering for testing

permissions:
  contents: write  # Explicitly set permission to write to repository contents

jobs:
  check_website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer@19.7.5
          
      - name: Create script file
        run: |
          cat > check_website.js << 'ENDSCRIPT'
          const fs = require('fs');
          const path = require('path');
          const puppeteer = require('puppeteer');
          
          // Create data directory if it doesn't exist
          const dataDir = path.join(process.cwd(), 'data');
          if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
          }
          
          // Create a debug log file
          const debugLogFile = path.join(dataDir, 'debug.log');
          fs.writeFileSync(debugLogFile, `Debug log started at ${new Date().toISOString()}\n`);
          
          function logDebug(message) {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] ${message}\n`;
            fs.appendFileSync(debugLogFile, logMessage);
            console.log(message);
          }
          
          // Keywords to look for
          const keywords = [
            "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",
            "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN",
            "2:30"
          ];
          
          logDebug(`Looking for keywords: ${keywords.join(', ')}`);
          
          // Function to extract which keywords are present in the content
          function findKeywords(content) {
            const found = [];
            for (const keyword of keywords) {
              // Use word boundary regex for exact matches
              const regex = new RegExp('\\b' + keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '\\b');
              if (regex.test(content)) {
                found.push(keyword);
                logDebug(`Found keyword: ${keyword}`);
              }
            }
            return Array.from(new Set(found)); // Remove duplicates
          }
          
          // Get previous keywords state
          const previousKeywordsFile = path.join(dataDir, 'previous_keywords.json');
          let previousKeywords = [];
          
          if (fs.existsSync(previousKeywordsFile)) {
            try {
              previousKeywords = JSON.parse(fs.readFileSync(previousKeywordsFile, 'utf8'));
              logDebug(`Loaded previous keywords: ${JSON.stringify(previousKeywords)}`);
            } catch (error) {
              logDebug(`Error reading previous keywords: ${error.message}`);
              previousKeywords = [];
            }
          } else {
            logDebug('No previous keywords file found, starting fresh');
          }
          
          // Helper function for delay
          function delay(time) {
            return new Promise(function(resolve) { 
              setTimeout(resolve, time);
            });
          }
          
          // Main function to check the website
          async function checkWebsite() {
            logDebug('Starting website check');
            
            // Create dummy files to ensure we have something to commit
            fs.writeFileSync(path.join(dataDir, 'last_check_time.txt'), new Date().toISOString());
            
            // Launch browser with stealth mode
            logDebug('Launching browser');
            const browser = await puppeteer.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu'
              ]
            });
            
            try {
              logDebug('Creating new page');
              const page = await browser.newPage();
              
              // Set a realistic viewport
              await page.setViewport({ width: 1280, height: 800 });
              logDebug('Set viewport');
              
              // Set user agent to appear as a regular browser
              await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36');
              logDebug('Set user agent');
              
              // Enable console logs from the page
              page.on('console', msg => logDebug(`Browser console: ${msg.text()}`));
              
              // Navigate to the website
              logDebug(`Navigating to: ${process.env.WEBSITE_URL}`);
              await page.goto(process.env.WEBSITE_URL, {
                waitUntil: 'networkidle2', // Wait until network is idle
                timeout: 60000 // 60 seconds timeout
              });
              logDebug('Page loaded');
              
              // Wait some extra time for Angular to render content
              logDebug('Waiting for content to render...');
              await delay(10000); // 10 second additional wait using our custom delay function
              logDebug('Wait completed');
              
              // Try to interact with the page to trigger any lazy-loaded content
              logDebug('Scrolling page to trigger dynamic content');
              await page.evaluate(() => {
                window.scrollBy(0, window.innerHeight);
              });
              await delay(5000); // Wait a bit more after scrolling
              
              // Extract page content
              logDebug('Extracting page content');
              const content = await page.content();
              logDebug(`Page content length: ${content.length} bytes`);
              
              // Save full page content for debugging (let's check what we're actually getting)
              fs.writeFileSync(path.join(dataDir, 'full_page.html'), content);
              logDebug('Saved full page HTML');
              
              // Save sample for debugging
              const sampleSize = Math.min(10000, content.length);
              fs.writeFileSync(path.join(dataDir, 'page_sample.txt'), content.substring(0, sampleSize));
              logDebug(`Saved first ${sampleSize} bytes of page content`);
              
              // Extract visible text for better keyword detection
              logDebug('Extracting visible text');
              const visibleText = await page.evaluate(() => {
                return document.body.innerText;
              });
              logDebug(`Visible text length: ${visibleText.length} bytes`);
              
              // Save visible text for debugging
              fs.writeFileSync(path.join(dataDir, 'visible_text.txt'), visibleText);
              logDebug('Saved visible text for debugging');
              
              // Take screenshot for debugging
              logDebug('Taking screenshot');
              await page.screenshot({ path: path.join(dataDir, 'screenshot.png'), fullPage: true });
              logDebug('Saved screenshot for debugging');
              
              // Find keywords
              logDebug('Finding keywords in visible text');
              const currentKeywords = findKeywords(visibleText);
              logDebug(`Keywords found: ${JSON.stringify(currentKeywords)}`);
              
              // Save current keywords state
              fs.writeFileSync(previousKeywordsFile, JSON.stringify(currentKeywords, null, 2));
              logDebug('Saved current keywords state');
              
              // Find newly appeared keywords
              const newKeywords = currentKeywords.filter(k => !previousKeywords.includes(k));
              logDebug(`New keywords: ${JSON.stringify(newKeywords)}`);
              
              // Determine if we should send notification
              const shouldNotify = newKeywords.length > 0;
              logDebug(`Should notify: ${shouldNotify}`);
              
              // Create notification message
              const notificationMessage = shouldNotify ? `Cages updated with ${newKeywords.join(', ')}` : '';
              
              // Set outputs for next steps
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `notify=${shouldNotify ? 'true' : 'false'}\n`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `message=${notificationMessage}\n`);
              
              if (shouldNotify) {
                logDebug(`New slots available! Found: ${newKeywords.join(', ')}`);
              } else {
                logDebug('No new slots detected');
              }
              
            } catch (error) {
              logDebug(`Error during website check: ${error.message}`);
              console.error('Error during website check:', error);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, 'notify=false\n');
              fs.appendFileSync(process.env.GITHUB_OUTPUT, 'message=Error checking website\n');
            } finally {
              logDebug('Closing browser');
              await browser.close();
              logDebug('Browser closed');
            }
          }
          
          // Run the check
          checkWebsite();
          ENDSCRIPT

      - name: Check website for specific keywords
        id: check
        env:
          WEBSITE_URL: ${{ secrets.WEBSITE_URL }}
        run: |
          echo "Starting website check..."
          node check_website.js
          echo "Website check completed."

      - name: Send notification
        if: steps.check.outputs.notify == 'true'
        run: |
          curl -s \
            --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
            --form-string "user=${{ secrets.PUSHOVER_USER }}" \
            --form-string "message=${{ steps.check.outputs.message }}" \
            --form-string "title=Batting Cage Alert!" \
            --form-string "url=${{ secrets.WEBSITE_URL }}" \
            --form-string "url_title=Go to Reservation Page" \
            --form-string "priority=1" \
            --form-string "sound=siren" \
            https://api.pushover.net/1/messages.json

      - name: List files in data directory
        run: |
          echo "Files in data directory:"
          ls -la data/
          echo "Content of previous_keywords.json:"
          cat data/previous_keywords.json || echo "File not found"

      - name: Force commit all changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add -A
          git commit -m "Update keywords state and debugging files" --allow-empty
          git push
